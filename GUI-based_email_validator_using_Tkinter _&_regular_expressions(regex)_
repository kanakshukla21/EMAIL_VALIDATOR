{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "124ebd35",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "6f73e617",
   "metadata": {},
   "source": [
    "# GUI-based email validator using Tkinter and regular expressions (regex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "302ca267",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re #Used for regex-based email validation\n",
    "import tkinter as tk # Used to create a graphical user interface (GUI)\n",
    "from tkinter import messagebox #Used to show pop-up messages for valid/invalid emails\n",
    "\n",
    "# Function to Validate Email\n",
    "def is_valid_email(email):\n",
    "    # Regular expression pattern for basic email validation\n",
    "    basic_pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n",
    "\n",
    "    # Allow only specific email providers (Gmail, Outlook, Yahoo)\n",
    "    allowed_domains = [\"gmail.com\", \"outlook.com\", \"hotmail.com\", \"live.com\", \"yahoo.com\"]\n",
    "\n",
    "    if not re.match(basic_pattern, email):\n",
    "        return False, \"Invalid email format.\"\n",
    "\n",
    "    domain = email.split(\"@\")[-1]  # Extract domain from email\n",
    "\n",
    "    if domain in allowed_domains:\n",
    "        return True, f\"Valid {domain} email address.\"\n",
    "    else:\n",
    "        return False, \"Invalid email provider. Use Gmail, Outlook, or Yahoo.\"\n",
    "\n",
    "#Function to Handle Button Click    \n",
    "def on_validate_click():\n",
    "    email = entry_email.get().strip().lower()  # Get and clean input\n",
    "\n",
    "    if not email:\n",
    "        messagebox.showwarning(\"Error\", \"Please enter an email address.\")\n",
    "        return\n",
    "\n",
    "    is_valid, message = is_valid_email(email)\n",
    "    \n",
    "    if is_valid:\n",
    "        messagebox.showinfo(\"Valid\", message)\n",
    "    else:\n",
    "        messagebox.showwarning(\"Invalid\", message)\n",
    "\n",
    "#Creating the GUI\n",
    "app = tk.Tk()\n",
    "app.title(\"Email Validator\")\n",
    "app.geometry(\"400x200\")\n",
    "\n",
    "#Adding UI Components\n",
    "label = tk.Label(app, text=\"Enter email address:\")\n",
    "label.pack(pady=10)\n",
    "\n",
    "entry_email = tk.Entry(app, width=30)\n",
    "entry_email.pack(pady=5)\n",
    "\n",
    "validate_button = tk.Button(app, text=\"Validate Email\", command=on_validate_click)\n",
    "validate_button.pack(pady=10)\n",
    "\n",
    "# Running the Application\n",
    "app.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "012c5de2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
